eyJhbGciOiJFUzI1NiJ9.{
    "version": 1,
    "timestamp": "2025-09-05T14:00:00+00:00",
    "sequence": 110,
    "actions": [
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "!",
                        "mobile": ">=25.8.1",
                        "web": "!"
                    },
                    "os": {
                        "macos": "!",
                        "linux": "!",
                        "windows": "!",
                        "android": "!",
                        "ios": "*",
                        "chromeos": "!"
                    }
                }
            ],
            "message": {
                "id": "dcbadcba-e5f6-7890-abcd-ef1234567890",
                "priority": 91,
                "dismissible": false,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en": "Trading is not available.",
                    "es": "Trading is not available.",
                    "cs": "Trading is not available.",
                    "de": "Trading is not available.",
                    "fr": "Trading is not available.",
                    "it": "Trading is not available.",
                    "pt": "Trading is not available.",
                    "tr": "Trading is not available.",
                    "ru": "Trading is not available.",
                    "ja": "Trading is not available.",
                    "uk": "Trading is not available.",
                    "hu": "Trading is not available."
                },
                "feature": [
                    {
                        "domain": "trading.buy",
                        "flag": false
                    },
                    {
                        "domain": "trading.sell",
                        "flag": false
                    },
                    {
                        "domain": "trading.exchange",
                        "flag": false
                    }
                ]
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "22.4.0",
                        "mobile": "!",
                        "web": "22.4.0"
                    }
                }
            ],
            "message": {
                "id": "c3196201-b796-4c47-abdb-ac68c15ae371",
                "priority": 99,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "WARNING: You are currently using a fake version of Trezor Suite. EXIT THIS PROGRAM IMMEDIATELY!",
                    "es": "ADVERTENCIA: Actualmente estás utilizando una versión falsa de Trezor Suite. CIERRA EL PROGRAMA INMEDIATAMENTE.",
                    "cs": "VAROVÁNÍ: Momentálně používáte falešnou verzi Trezor Suite. OKAMŽITĚ UKONČETE TENTO PROGRAM!",
                    "ru": "ВНИМАНИЕ: Вы сейчас используете поддельную версию Trezor Suite. НЕМЕДЛЕННО ВЫЙДИТЕ ИЗ ЭТОЙ ПРОГРАММЫ!",
                    "ja": "警告：あなたは現在、Trezor Suiteの偽バージョンを使用しています。このプログラムを直ちに終了してください。",
                    "hu": "FIGYELMEZTETÉS: Ön jelenleg a Trezor Suite hamis verzióját használja. AZONNAL LÉPJEN KI A PROGRAMBÓL!",
                    "it": "AVVERTENZA: Si sta utilizzando una versione contraffatta de Trezor Suite. USCITE IMMEDIATAMENTE DA QUESTO PROGRAMMA!",
                    "fr": "AVERTISSEMENT : vous utilisez actuellement une version contrefaite de Trezor Suite. QUITTEZ CE PROGRAMME IMMÉDIATEMENT !",
                    "de": "WARNUNG: Du verwendest momentan eine gefälschte Version von Trezor Suite. BEENDE DIESES PROGRAMM SOFORT!",
                    "tr": "UYARI: Şu anda sahte bir Trezor Suite sürümü kullanıyorsunuz. BU PROGRAMDAN HEMEN ÇIKIN!",
                    "pt": "AVISO: Você está atualmente usando uma versão falsa do Trezor Suite. SAIA DESTE PROGRAMA IMEDIATAMENTE!",
                    "uk": "УВАГА: Ви в даний момент використовуєте підроблену версію Trezor Suite. НЕГАЙНО ВИЙДІТЬ З ЦЬОГО ПРОГРАМИ!"
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=22.4.3",
                        "mobile": "!",
                        "web": ">=22.4.3",
                        "revision": "*"
                    },
                    "devices": [
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "2.0.4",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "2.0.4",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "5bc3e353e0b9fe977013005001f6e34e03ec6f08",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "5bc3e353e0b9fe977013005001f6e34e03ec6f08",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "b0a7e13c884b2fb4f06a45ba474dbb6f94da3357",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "b0a7e13c884b2fb4f06a45ba474dbb6f94da3357",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "e1c605ca90c6107befe11692b4675b7537f3a658",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "e1c605ca90c6107befe11692b4675b7537f3a658",
                            "vendor": "*"
                        },
                        {
                            "model": "1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "e1c605ca90c6107befe11692b4675b7537f3a658",
                            "vendor": "*"
                        },
                        {
                            "model": "T1B1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "e1c605ca90c6107befe11692b4675b7537f3a658",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "1e62209d024b7e84a7368be8175735372b8080c9",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "1e62209d024b7e84a7368be8175735372b8080c9",
                            "vendor": "*"
                        },
                        {
                            "model": "1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "1e62209d024b7e84a7368be8175735372b8080c9",
                            "vendor": "*"
                        },
                        {
                            "model": "T1B1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "1e62209d024b7e84a7368be8175735372b8080c9",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "2.4.4",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "2.4.4",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "661ae37506f6e6ef94067d4b6de26c80bfb4c4b5",
                            "vendor": "*"
                        },
                        {
                            "model": "T1B1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "661ae37506f6e6ef94067d4b6de26c80bfb4c4b5",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "661ae37506f6e6ef94067d4b6de26c80bfb4c4b5",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "661ae37506f6e6ef94067d4b6de26c80bfb4c4b5",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "307865613335663436663566356364373962353461373039643438623533343132363534356533646230",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "307865613335663436663566356364373962353461373039643438623533343132363534356533646230",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "ea35f46f5f5cd79b54a709d48b534126545e3db0",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "ea35f46f5f5cd79b54a709d48b534126545e3db0",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "33e3da8ed3cdb5e689099b7d1c1d24fac254aa2c",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "33e3da8ed3cdb5e689099b7d1c1d24fac254aa2c",
                            "vendor": "*"
                        },
                        {
                            "model": "T",
                            "firmware": ">2.6.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "88e1f8c7a5c7615723664c64b0a25adc0c409dee",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": ">2.6.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "88e1f8c7a5c7615723664c64b0a25adc0c409dee",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "6f793f82-5e13-492f-803c-1cbd7dcc3cb6",
                "priority": 99,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "CAUTION: Unofficial firmware detected! Your Trezor may be counterfeit. Contact help@trezor.io immediately.",
                    "es": "ATENCIÓN: Se ha detectado un firmware no oficial. Tu Trezor puede ser una falsificación. Ponte en contacto con help@trezor.io inmediatamente.",
                    "cs": "UPOZORNĚNÍ: Byl detekován neoficiální firmware! Váš Trezor může být padělaný. Okamžitě kontaktujte help@trezor.io.",
                    "ru": "ВНИМАНИЕ: Обнаружено неофициальное ПО! Ваш Trezor может быть подделкой. Свяжитесь с нами немедленно на help@trezor.io.",
                    "ja": "注意：非公式のファームウェアが検出されました！お使いのTrezorは偽物かもしれません。直ちにhelp@trezor.ioに連絡してください。",
                    "hu": "FIGYELEM: Nem hivatalos firmware-t észleltek! Lehet, hogy a Trezorod hamisítvány. Azonnal lépjen kapcsolatba a help@trezor.io címen.",
                    "it": "ATTENZIONE: rilevato un firmware non ufficiale! Il vostro Trezor potrebbe essere contraffatto. Contattare immediatamente help@trezor.io.",
                    "fr": "ATTENTION : micrologiciel non officiel détecté ! Votre Trezor est peut-être une contrefaçon. Contactez immédiatement help@trezor.io.",
                    "de": "ACHTUNG: Inoffizielle Firmware erkannt! Dein Trezor könnte eine Fälschung sein. Wende dich sofort an help@trezor.io.",
                    "tr": "DİKKAT: Resmi olmayan bir firmware tespit edildi! Trezor'unuz sahte olabilir. Derhal help@trezor.io ile iletişime geçin.",
                    "pt": "CUIDADO: Foi detetado um firmware não oficial! O seu Trezor pode ser uma falsificação. Contacte imediatamente help@trezor.io.",
                    "uk": "УВАГА: Виявлено неофіційне програмне забезпечення! Ваш Trezor може бути підробкою. Негайно зверніться до help@trezor.io."
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<24.5.4",
                        "mobile": "!",
                        "web": "!"
                    }
                }
            ],
            "message": {
                "id": "b9037f3b-6385-438a-8871-842b825b30cc",
                "priority": 99,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "You’re using an outdated version of Trezor Suite that doesn’t support automatic updates. To keep receiving new features and security fixes, update to the latest version.",
                    "es": "Estás usando una versión obsoleta de Trezor Suite que no admite actualizaciones automáticas. Para seguir recibiendo nuevas funciones y mejoras de seguridad, actualiza a la última versión.",
                    "cs": "Používáte zastaralou verzi Trezor Suite, která nepodporuje automatické aktualizace. Chcete-li nadále dostávat nové funkce a bezpečnostní opravy, aktualizujte na nejnovější verzi.",
                    "ru": "Вы используете устаревшую версию Trezor Suite, которая не поддерживает автоматические обновления. Чтобы продолжать получать новые функции и исправления безопасности, обновитесь до последней версии.",
                    "ja": "自動アップデートに対応していない古いバージョンのTrezor Suiteを使用しています。新しい機能やセキュリティ修正を継続して受け取るために、最新バージョンに更新してください。",
                    "hu": "A Trezor Suite egy elavult verzióját használja, amely nem támogatja az automatikus frissítéseket. A további új funkciók és biztonsági javítások érdekében frissítsen a legújabb verzióra.",
                    "it": "Stai utilizzando una versione obsoleta di Trezor Suite che non supporta gli aggiornamenti automatici. Per continuare a ricevere nuove funzionalità e correzioni di sicurezza, aggiorna all'ultima versione.",
                    "fr": "Vous utilisez une version obsolète de Trezor Suite qui ne prend pas en charge les mises à jour automatiques. Pour continuer à recevoir de nouvelles fonctionnalités et des correctifs de sécurité, mettez à jour vers la dernière version.",
                    "de": "Sie verwenden eine veraltete Version von Trezor Suite, die automatische Updates nicht unterstützt. Aktualisieren Sie auf die neueste Version, um weiterhin neue Funktionen und Sicherheitskorrekturen zu erhalten.",
                    "tr": "Otomatik güncellemeleri desteklemeyen eski bir Trezor Suite sürümünü kullanıyorsunuz. Yeni özellikler ve güvenlik düzeltmeleri almaya devam etmek için lütfen en son sürüme güncelleyin.",
                    "pt": "Está a utilizar uma versão desatualizada do Trezor Suite que não suporta atualizações automáticas. Para continuar a receber novas funcionalidades e correções de segurança, atualize para a versão mais recente.",
                    "uk": "Ви використовуєте застарілу версію Trezor Suite, яка не підтримує автоматичні оновлення. Щоб продовжувати отримувати нові функції та виправлення безпеки, оновіть до останньої версії."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/trezor-suite",
                    "label": {
                        "en": "Go to trezor.io/trezor-suite",
                        "es": "Visita trezor.io/trezor-suite",
                        "cs": "Přejít na trezor.io/trezor-suite",
                        "ru": "Перейти на trezor.io/trezor-suite",
                        "ja": "trezor.io/trezor-suite に移動",
                        "hu": "Tovább a trezor.io/trezor-suite oldalra",
                        "it": "Vai a trezor.io/trezor-suite",
                        "fr": "Accédez à trezor.io/trezor-suite",
                        "de": "Gehe zu trezor.io/trezor-suite",
                        "tr": "trezor.io/trezor-suite adresine git",
                        "pt": "Ir para trezor.io/trezor-suite",
                        "uk": "Перейти на trezor.io/trezor-suite"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<24.6.2",
                        "mobile": "!",
                        "web": "<24.6.2"
                    },
                    "devices": [
                        {
                            "model": "T3T1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "adec1327-d063-4107-860d-e08f73b6ea27",
                "priority": 98,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "Update required! This version of Trezor Suite isn’t compatible with your device. Update to continue.",
                    "es": "Es necesaria una actualización. Esta versión de Trezor Suite no es compatible con tu dispositivo. Instala la actualización para continuar.",
                    "cs": "Nutná aktualizace! Tato verze Trezor Suite není kompatibilní s vaším zařízením. Chcete-li pokračovat, proveďte aktualizaci.",
                    "ru": "Требуется обновление! Данная версия Trezor Suite несовместима с вашим устройством. Обновите программу, чтобы продолжить.",
                    "ja": "アップデートが必要です！このバージョンのTrezor Suiteは、お使いのデバイスと互換性がありません。続行するには、アップデートしてください。",
                    "hu": "Frissítés szükséges! A Trezor Suite ezen verziója nem kompatibilis az Ön készülékével. A folytatáshoz frissítsen.",
                    "it": "È necessario un aggiornamento! Questa versione di Trezor Suite non è compatibile con il vostro dispositivo. Aggiornare per continuare.",
                    "fr": "Mise à jour requise ! Cette version de Trezor Suite n’est pas compatible avec votre dispositif. Procédez à la mise à jour pour continuer.",
                    "de": "Update erforderlich! Diese Version von Trezor Suite ist nicht mit deinem Gerät kompatibel. Aktualisiere, um fortzufahren.",
                    "tr": "Güncelleme gerekiyor! Bu Trezor Suite sürümü cihazınızla uyumlu değil. Devam etmek için güncelleyin.",
                    "pt": "Atualização necessária! Esta versão do Trezor Suite não é compatível com o seu dispositivo. Atualize para continuar.",
                    "uk": "Потрібне оновлення! Ця версія Trezor Suite несумісна з вашим пристроєм. Оновіть програму, щоб продовжити."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "settings-index",
                    "anchor": "@general-settings/version-with-update",
                    "label": {
                        "en": "Update Suite",
                        "es": "Actualizar Suite",
                        "cs": "Aktualizovat Suite",
                        "ru": "Обновить Suite",
                        "ja": "Suiteのアップデート",
                        "hu": "Frissítés Suite",
                        "it": "Aggiorna Suite",
                        "fr": "Mettre à jour Suite",
                        "de": "Suite aktualisieren",
                        "tr": "Suite'i Güncelle",
                        "pt": "Atualizar Suite",
                        "uk": "Оновити Suite"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<25.6.1",
                        "mobile": "!",
                        "web": "!"
                    },
                    "devices": [
                        {
                            "model": "T3B1",
                            "firmware": "*",
                            "bootloader": "2.1.10",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "90906f36-9a37-45ad-a83f-3b8d52a88efe",
                "priority": 98,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "Update required! This version of Trezor Suite isn’t compatible with your device. Please update to continue.",
                    "es": "¡Actualización necesaria! Esta versión de Trezor Suite no es compatible con tu dispositivo. Por favor, actualiza para continuar.",
                    "cs": "Je vyžadována aktualizace! Tato verze Trezor Suite není kompatibilní s vaším zařízením. Pro pokračování prosím aktualizujte.",
                    "ru": "Требуется обновление! Эта версия Trezor Suite несовместима с вашим устройством. Пожалуйста, обновите программу, чтобы продолжить.",
                    "ja": "アップデートが必要です。このバージョンのTrezor Suiteはお使いのデバイスと互換性がありません。続行するにはアップデートしてください。",
                    "hu": "Frissítés szükséges! A Trezor Suite jelenlegi verziója nem kompatibilis az eszközével. Kérjük, frissítsen a folytatáshoz.",
                    "it": "È necessario un aggiornamento! Questa versione di Trezor Suite non è compatibile con il tuo dispositivo. Aggiorna per continuare.",
                    "fr": "Mise à jour requise ! Cette version de Trezor Suite n’est pas compatible avec votre appareil. Veuillez la mettre à jour pour continuer.",
                    "de": "Update erforderlich! Diese Version von Trezor Suite ist nicht mit deinem Gerät kompatibel. Bitte aktualisiere, um fortzufahren.",
                    "tr": "Güncelleme gerekli! Bu Trezor Suite sürümü cihazınızla uyumlu değil. Devam etmek için lütfen güncelleyin.",
                    "pt": "Atualização necessária! Esta versão do Trezor Suite não é compatível com seu dispositivo. Atualize para continuar.",
                    "uk": "Потрібне оновлення! Ця версія Trezor Suite несумісна з вашим пристроєм. Будь ласка, оновіть програму, щоб продовжити."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "settings-index",
                    "anchor": "@general-settings/version-with-update",
                    "label": {
                        "en": "Update Suite",
                        "es": "Actualizar Suite",
                        "cs": "Aktualizovat Suite",
                        "ru": "Обновить Suite",
                        "ja": "Suiteのアップデート",
                        "hu": "Frissítés Suite",
                        "it": "Aggiorna Suite",
                        "fr": "Mettre à jour Suite",
                        "de": "Suite aktualisieren",
                        "tr": "Suite'i Güncelle",
                        "pt": "Atualizar Suite",
                        "uk": "Оновити Suite"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<24.12.3",
                        "mobile": "!",
                        "web": "<24.12.3"
                    },
                    "devices": [
                        {
                            "model": "T3B1",
                            "firmware": "*",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "c94f5a81-5e07-4d2b-8402-a8e651467caa",
                "priority": 98,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "Update required! This version of Trezor Suite isn’t compatible with your device. Update to continue.",
                    "es": "Es necesaria una actualización. Esta versión de Trezor Suite no es compatible con tu dispositivo. Instala la actualización para continuar.",
                    "cs": "Nutná aktualizace! Tato verze Trezor Suite není kompatibilní s vaším zařízením. Chcete-li pokračovat, proveďte aktualizaci.",
                    "ru": "Требуется обновление! Данная версия Trezor Suite несовместима с вашим устройством. Обновите программу, чтобы продолжить.",
                    "ja": "アップデートが必要です！このバージョンのTrezor Suiteは、お使いのデバイスと互換性がありません。続行するには、アップデートしてください。",
                    "hu": "Frissítés szükséges! A Trezor Suite ezen verziója nem kompatibilis az Ön készülékével. A folytatáshoz frissítsen.",
                    "it": "È necessario un aggiornamento! Questa versione de Trezor Suite non è compatibile con il vostro dispositivo. Aggiornare per continuare.",
                    "fr": "Mise à jour requise ! Cette version de Trezor Suite n’est pas compatible avec votre dispositif. Procédez à la mise à jour pour continuer.",
                    "de": "Update erforderlich! Diese Version von Trezor Suite ist nicht mit deinem Gerät kompatibel. Aktualisiere, um fortzufahren.",
                    "tr": "Güncelleme gerekiyor! Bu Trezor Suite sürümü cihazınızla uyumlu değil. Devam etmek için güncelleyin.",
                    "pt": "Atualização necessária! Esta versão do Trezor Suite não é compatível com o seu dispositivo. Atualize para continuar.",
                    "uk": "Потрібне оновлення! Ця версія Trezor Suite несумісна з вашим пристроєм. Оновіть програму, щоб продовжити."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "settings-index",
                    "anchor": "@general-settings/version-with-update",
                    "label": {
                        "en": "Update Suite",
                        "es": "Actualizar Suite",
                        "cs": "Aktualizovat Suite",
                        "ru": "Обновить Suite",
                        "ja": "Suiteのアップデート",
                        "hu": "Frissítés Suite",
                        "it": "Aggiorna Suite",
                        "fr": "Mettre à jour Suite",
                        "de": "Suite aktualisieren",
                        "tr": "Suite'i Güncelle",
                        "pt": "Atualizar Suite",
                        "uk": "Оновити Suite"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=24.12.3",
                        "mobile": "!",
                        "web": "*"
                    },
                    "devices": [
                        {
                            "model": "1",
                            "firmware": ">=1.5.2 <1.7.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T1B1",
                            "firmware": ">=1.5.2 <1.7.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "a3c3a3b7-efbe-4e39-9ffd-1836338e7811",
                "priority": 96,
                "dismissible": true,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "Updating the firmware may wipe your Trezor. Verify your backup now to ensure you can recover your assets.",
                    "es": "La actualización del firmware podría borrar su Trezor. Verifique su copia de seguridad ahora para asegurarse de que puede recuperar sus activos.",
                    "cs": "Aktualizace firmwaru může vymazat váš Trezor. Zkontrolujte nyní svou zálohu, abyste se ujistili, že můžete obnovit své prostředky.",
                    "ru": "Обновление прошивки может стереть ваш Trezor. Проверьте свою резервную копию сейчас, чтобы убедиться, что вы сможете восстановить свои активы.",
                    "ja": "ファームウェアの更新により、Trezorが消去される可能性があります。資産を回復できることを確認するために、今すぐバックアップを確認してください。",
                    "hu": "A firmware frissítése törölheti a Trezorját. Ellenőrizze most a biztonsági mentését, hogy biztosítsa, hogy vissza tudja állítani az eszközét.",
                    "it": "L'aggiornamento del firmware potrebbe cancellare il tuo Trezor. Verifica il tuo backup ora per assicurarti di poter recuperare i tuoi asset.",
                    "fr": "La mise à jour du micrologiciel peut effacer votre Trezor. Vérifiez votre sauvegarde maintenant pour vous assurer que vous pouvez récupérer vos actifs.",
                    "de": "Ein Firmware-Update kann Ihren Trezor löschen. Überprüfen Sie jetzt Ihr Backup, um sicherzustellen, dass Sie Ihre Assets wiederherstellen können.",
                    "tr": "Firmware güncellemesi Trezor'unuzu silebilir. Varlıklarınızı kurtarabileceğinizden emin olmak için yedeğinizi şimdi doğrulayın.",
                    "pt": "A atualização do firmware pode apagar o seu Trezor. Verifique o seu backup agora para garantir que pode recuperar os seus ativos.",
                    "uk": "Оновлення прошивки може видалити ваш Trezor. Перевірте свою резервну копію зараз, щоб переконатися, що ви зможете відновити свої активи."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "recovery-index",
                    "label": {
                        "en": "Check wallet backup",
                        "es": "Verificar copia de seguridad de la cartera",
                        "cs": "Zkontrolovat zálohu peněženky",
                        "ru": "Проверить резервную копию кошелька",
                        "ja": "ウォレットのバックアップを確認",
                        "hu": "Ellenőrizze a pénztárca biztonsági mentését",
                        "it": "Verifica il backup del portafoglio",
                        "fr": "Vérifier la sauvegarde du portefeuille",
                        "de": "Überprüfen Sie das Wallet-Backup",
                        "tr": "Cüzdan yedeğini kontrol et",
                        "pt": "Verificar backup da carteira",
                        "uk": "Перевірити резервну копію гаманця"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "settings": [
                        {
                            "dash": true
                        },
                        {
                            "btg": true
                        },
                        {
                            "nmc": true
                        },
                        {
                            "vtc": true
                        },
                        {
                            "dgb": true
                        }
                    ],
                    "environment": {
                        "desktop": "<25.2.1",
                        "mobile": "<25.2.1",
                        "web": "<25.2.1"
                    }
                }
            ],
            "message": {
                "id": "243b15fc-027c-409b-855e-73a98b631af0",
                "priority": 94,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "Important: The backends for Dash, Bitcoin Gold, Namecoin, Vertcoin, and DigiByte were deactivated as of August 1, 2025. To access or manage your assets, use a compatible third-party wallet app.",
                    "es": "Importante: Los sistemas backend de Dash, Bitcoin Gold, Namecoin, Vertcoin y DigiByte fueron desactivados a partir del 1 de agosto de 2025. Para acceder o gestionar sus activos, utilice una aplicación de billetera de terceros compatible.",
                    "cs": "Důležité: Backendové služby pro Dash, Bitcoin Gold, Namecoin, Vertcoin a DigiByte byly k 1. srpnu 2025 deaktivovány. Pro přístup ke svým prostředkům nebo jejich správu použijte kompatibilní aplikaci peněženky třetí strany.",
                    "ru": "Важно: Бэкэнды для Dash, Bitcoin Gold, Namecoin, Vertcoin и DigiByte были отключены с 1 августа 2025 года. Для доступа к активам или их управления используйте совместимое стороннее приложение-кошелек.",
                    "ja": "重要：Dash、Bitcoin Gold、Namecoin、Vertcoin、およびDigiByteのバックエンドは2025年8月1日をもって無効化されました。資産にアクセスまたは管理するには、互換性のあるサードパーティ製ウォレットアプリをご利用ください。",
                    "hu": "Fontos: A Dash, Bitcoin Gold, Namecoin, Vertcoin és DigiByte háttérrendszerei 2025. augusztus 1-jén deaktiválva lettek. Az eszközeid eléréséhez vagy kezeléséhez használj kompatibilis, harmadik féltől származó pénztárcaalkalmazást.",
                    "it": "Importante: I backend per Dash, Bitcoin Gold, Namecoin, Vertcoin e DigiByte sono stati disattivati a partire dal 1° agosto 2025. Per accedere o gestire i tuoi asset, utilizza un'app di portafoglio di terze parti compatibile.",
                    "fr": "Important : Les backends pour Dash, Bitcoin Gold, Namecoin, Vertcoin et DigiByte ont été désactivés à partir du 1er août 2025. Pour accéder à vos actifs ou les gérer, utilisez une application de portefeuille tierce compatible.",
                    "de": "Wichtig: Die Backends für Dash, Bitcoin Gold, Namecoin, Vertcoin und DigiByte wurden zum 1. August 2025 deaktiviert. Um auf Ihre Vermögenswerte zuzugreifen oder diese zu verwalten, verwenden Sie eine kompatible Wallet-App eines Drittanbieters.",
                    "tr": "Önemli: Dash, Bitcoin Gold, Namecoin, Vertcoin ve DigiByte için arka uçlar 1 Ağustos 2025 itibarıyla devre dışı bırakıldı. Varlıklarınıza erişmek veya onları yönetmek için uyumlu bir üçüncü taraf cüzdan uygulaması kullanın.",
                    "pt": "Importante: Os backends para Dash, Bitcoin Gold, Namecoin, Vertcoin e DigiByte foram desativados a partir de 1º de agosto de 2025. Para acessar ou gerenciar seus ativos, use um aplicativo de carteira de terceiros compatível.",
                    "uk": "Увага: Сервери для Dash, Bitcoin Gold, Namecoin, Vertcoin та DigiByte були деактивовані з 1 серпня 2025 року. Щоб отримати доступ до своїх активів або керувати ними, скористайтеся сумісним стороннім додатком-гаманцем."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/learn/a/deprecated-coins",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=25.2.1",
                        "mobile": "!",
                        "web": ">=25.2.1"
                    },
                    "devices": [
                        {
                            "model": "T1B1",
                            "firmware": ">=1.12.1 <=1.13.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "1",
                            "firmware": ">=1.12.1 <=1.13.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "8901bcbb-d9b2-4901-bfc3-3669175f04a8",
                "priority": 94,
                "dismissible": true,
                "variant": "info",
                "category": ["banner"],
                "content": {
                    "en": "New Trezor firmware is available! Please update your device.",
                    "es": "¡Hay disponible un nuevo firmware de Trezor! Por favor, actualiza tu dispositivo.",
                    "cs": "Je k dispozici nový firmware pro Trezor! Aktualizujte prosím své zařízení.",
                    "ru": "Доступна новая прошивка Trezor! Пожалуйста, обновите ваше устройство.",
                    "ja": "新しいTrezorファームウェアが利用可能です！デバイスをアップデートしてください。",
                    "hu": "Új Trezor firmware érhető el! Kérjük, frissítse a készülékét.",
                    "it": "È disponibile un nuovo firmware Trezor! Si prega di aggiornare il dispositivo.",
                    "fr": "Un nouveau firmware Trezor est disponible ! Veuillez mettre à jour votre appareil.",
                    "de": "Neue Trezor-Firmware verfügbar! Bitte aktualisieren Sie Ihr Gerät.",
                    "tr": "Yeni Trezor yazılımı mevcut! Lütfen cihazınızı güncelleyin.",
                    "pt": "Está disponível um novo firmware Trezor! Por favor, atualize o seu dispositivo.",
                    "uk": "Доступна нова прошивка Trezor! Будь ласка, оновіть ваш пристрій."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "firmware-index",
                    "label": {
                        "en": "Update now",
                        "es": "Actualizar ahora",
                        "cs": "Aktualizovat teď",
                        "ru": "Обновить сейчас",
                        "ja": "今すぐアップデート",
                        "hu": "Frissítés most",
                        "it": "Aggiorna ora",
                        "fr": "Mettre à jour maintenant",
                        "de": "Jetzt aktualisieren",
                        "tr": "Şimdi Güncelle",
                        "pt": "Atualizar agora",
                        "uk": "Оновити зараз"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "!",
                        "mobile": "25.2.1",
                        "web": "!"
                    },
                    "devices": [
                        {
                            "model": "T1B1",
                            "firmware": "1.12.1",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "1",
                            "firmware": "1.12.1",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "49e7400f-c457-4309-b0bb-a221f6b09b36",
                "priority": 94,
                "dismissible": true,
                "variant": "info",
                "category": ["banner"],
                "content": {
                    "en": "New Trezor firmware is available! Please update your device.",
                    "es": "¡Hay disponible un nuevo firmware de Trezor! Por favor, actualiza tu dispositivo.",
                    "cs": "Je k dispozici nový firmware pro Trezor! Aktualizujte prosím své zařízení.",
                    "ru": "Доступна новая прошивка Trezor! Пожалуйста, обновите ваше устройство.",
                    "ja": "新しいTrezorファームウェアが利用可能です！デバイスをアップデートしてください。",
                    "hu": "Új Trezor firmware érhető el! Kérjük, frissítse a készülékét.",
                    "it": "È disponibile un nuovo firmware Trezor! Si prega di aggiornare il dispositivo.",
                    "fr": "Un nouveau firmware Trezor est disponible ! Veuillez mettre à jour votre appareil.",
                    "de": "Neue Trezor-Firmware verfügbar! Bitte aktualisieren Sie Ihr Gerät.",
                    "tr": "Yeni Trezor yazılımı mevcut! Lütfen cihazınızı güncelleyin.",
                    "pt": "Está disponível um novo firmware Trezor! Por favor, atualize o seu dispositivo.",
                    "uk": "Доступна нова прошивка Trezor! Будь ласка, оновіть ваш пристрій."
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=21.7.1",
                        "mobile": "!",
                        "web": ">=21.7.1"
                    },
                    "devices": [
                        {
                            "model": "1",
                            "firmware": "<1.7.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T1B1",
                            "firmware": "<1.7.0",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "51a6aa24-a394-4def-a5b8-449093eaee3b",
                "priority": 94,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "Please update device firmware now: Your Trezor will not be recognized or usable in new versions of Trezor Suite.",
                    "es": "Actualice ahora el firmware del dispositivo: Su Trezor no será reconocido ni utilizable en las nuevas versiones de Trezor Suite.",
                    "cs": "Aktualizujte firmware zařízení: Váš Trezor nebude v nových verzích Trezor Suite rozpoznán ani použitelný.",
                    "ru": "Пожалуйста, обновите прошивку устройства прямо сейчас: Ваш Trezor не будет распознан и его нельзя будет использовать в новых версия Trezor Suite.",
                    "ja": "今すぐデバイスのファームウェアをアップデートしてください： お使いのTrezorは、新しいバージョンのTrezor Suiteでは認識されず、使用できません.",
                    "hu": "Kérjük, frissítse a készülék firmware-ét: A Trezor Suite új verziói nem ismerik fel és nem használhatók.",
                    "it": "Aggiornare subito il firmware del dispositivo: Il dispositivo Trezor non sarà riconosciuto o utilizzabile nelle nuove versioni di Trezor Suite.",
                    "fr": "Veuillez mettre à jour le micrologiciel de l'appareil maintenant : Votre Trezor ne sera pas reconnu ou utilisable dans les nouvelles versions de Trezor Suite.",
                    "de": "Bitte aktualisieren Sie jetzt die Firmware: Ihr Trezor wird in neuen Versionen der Trezor Suite nicht mehr erkannt und kann nicht verwendet werden.",
                    "tr": "Lütfen cihaz yazılımını şimdi güncelleyin: Trezor'unuz, Trezor Suite'in yeni sürümlerinde tanınmayacak veya kullanılamayacaktır.",
                    "pt": "Atualize agora o firmware do dispositivo: O seu Trezor não será reconhecido nem utilizável nas novas versões do Trezor Suite.",
                    "uk": "Будь ласка, оновіть прошивку пристрою зараз: Ваш Trezor не буде визнаний або використаний в нових версіях Trezor Suite."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "firmware-index",
                    "label": {
                        "en": "Update Firmware",
                        "es": "Actualizar firmware",
                        "cs": "Aktualizovat Firmware",
                        "ru": "Обновить прошивку",
                        "ja": "ファームウェアのアップデート",
                        "hu": "Firmware frissítése",
                        "it": "Aggiorna Firmware",
                        "fr": "Mettre à jour le micrologiciel",
                        "de": "Firmware aktualisieren",
                        "tr": "Firmware Güncelle",
                        "pt": "Atualizar Firmware",
                        "uk": "Оновити прошивку"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "settings": [
                        {
                            "dash": true
                        },
                        {
                            "btg": true
                        },
                        {
                            "nmc": true
                        },
                        {
                            "vtc": true
                        },
                        {
                            "dgb": true
                        }
                    ],
                    "environment": {
                        "desktop": "<25.2.1",
                        "mobile": "<25.2.1",
                        "web": "<25.2.1"
                    }
                }
            ],
            "message": {
                "id": "997dd618-7e84-4af4-970d-0f9175db30cd",
                "priority": 94,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "Important: Dash, Bitcoin Gold, Namecoin, Vertcoin, and DigiByte backends will be deactivated on August 1, 2025. Please transfer your funds before this change takes effect.",
                    "es": "Importante: Los backends de Dash, Bitcoin Gold, Namecoin, Vertcoin y DigiByte se desactivarán el 1 de agosto de 2025. Por favor, transfiera sus fondos antes de que este cambio entre en vigor.",
                    "cs": "Důležité: Backend služby pro Dash, Bitcoin Gold, Namecoin, Vertcoin a DigiByte budou deaktivovány 1. srpna 2025. Přeneste prosím své prostředky před tímto datem.",
                    "ru": "Важно: Бэкэнды Dash, Bitcoin Gold, Namecoin, Vertcoin и DigiByte будут деактивированы 1 августа 2025 года. Пожалуйста, переведите ваши средства до того, как это изменение вступит в силу.",
                    "ja": "重要：2025年8月1日より、Dash、Bitcoin Gold、Namecoin、Vertcoin、DigiByteのバックエンドが無効化されます。この変更が有効になる前に、資金を移動してください。",
                    "hu": "Fontos: A Dash, Bitcoin Gold, Namecoin, Vertcoin és DigiByte backendjei 2025. augusztus 1-jén deaktiválásra kerülnek. Kérjük, még ezen dátum előtt utalja át pénzeszközeit.",
                    "it": "Importante: I backend di Dash, Bitcoin Gold, Namecoin, Vertcoin e DigiByte saranno disattivati il 1° agosto 2025. Si prega di trasferire i fondi prima che questa modifica entri in vigore.",
                    "fr": "Important : Les backends de Dash, Bitcoin Gold, Namecoin, Vertcoin et DigiByte seront désactivés le 1er août 2025. Veuillez transférer vos fonds avant que ce changement ne prenne effet.",
                    "de": "Wichtig: Die Backends von Dash, Bitcoin Gold, Namecoin, Vertcoin und DigiByte werden am 1. August 2025 deaktiviert. Bitte übertragen Sie Ihre Gelder, bevor diese Änderung wirksam wird.",
                    "tr": "Önemli: Dash, Bitcoin Gold, Namecoin, Vertcoin ve DigiByte altyapıları 1 Ağustos 2025 tarihinde devre dışı bırakılacaktır. Lütfen bu tarihten önce fonlarınızı aktarın.",
                    "pt": "Importante: Os backends do Dash, Bitcoin Gold, Namecoin, Vertcoin e DigiByte serão desativados em 1º de agosto de 2025. Por favor, transfira seus fundos antes que esta mudança entre em vigor.",
                    "uk": "Важливо: 1 серпня 2025 року бекенди Dash, Bitcoin Gold, Namecoin, Vertcoin та DigiByte будуть деактивовані. Будь ласка, переведіть свої кошти до набрання чинності цією зміною."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/learn/a/deprecated-coins",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "!",
                        "mobile": ">=25.6.1",
                        "web": "!"
                    },
                    "os": {
                        "macos": "!",
                        "linux": "!",
                        "windows": "!",
                        "android": "!",
                        "ios": "*",
                        "chromeos": "!"
                    },
                    "countryCodes": [
                        "AF",
                        "AG",
                        "AI",
                        "AL",
                        "AM",
                        "AO",
                        "AQ",
                        "AR",
                        "AS",
                        "AT",
                        "AU",
                        "AW",
                        "AX",
                        "AZ",
                        "BA",
                        "BB",
                        "BD",
                        "BE",
                        "BF",
                        "BG",
                        "BH",
                        "BI",
                        "BJ",
                        "BL",
                        "BM",
                        "BN",
                        "BO",
                        "BQ",
                        "BR",
                        "BT",
                        "BV",
                        "BW",
                        "BY",
                        "BZ",
                        "CC",
                        "CD",
                        "CF",
                        "CG",
                        "CH",
                        "CI",
                        "CK",
                        "CL",
                        "CM",
                        "CN",
                        "CO",
                        "CU",
                        "CV",
                        "CW",
                        "CX",
                        "DE",
                        "DJ",
                        "DK",
                        "DM",
                        "DO",
                        "DZ",
                        "EC",
                        "EE",
                        "EG",
                        "EH",
                        "ER",
                        "ET",
                        "FI",
                        "FJ",
                        "FK",
                        "FM",
                        "FO",
                        "FR",
                        "GA",
                        "GB",
                        "GD",
                        "GE",
                        "GF",
                        "GG",
                        "GH",
                        "GI",
                        "GL",
                        "GM",
                        "GN",
                        "GP",
                        "GQ",
                        "GR",
                        "GS",
                        "GT",
                        "GU",
                        "GW",
                        "GY",
                        "HK",
                        "HM",
                        "HN",
                        "HR",
                        "HT",
                        "HU",
                        "ID",
                        "IL",
                        "IM",
                        "IN",
                        "IO",
                        "IQ",
                        "IR",
                        "IS",
                        "JE",
                        "JM",
                        "JO",
                        "JP",
                        "KE",
                        "KG",
                        "KH",
                        "KI",
                        "KM",
                        "KN",
                        "KP",
                        "KR",
                        "KW",
                        "KY",
                        "KZ",
                        "LA",
                        "LB",
                        "LC",
                        "LK",
                        "LR",
                        "LS",
                        "LU",
                        "LV",
                        "LY",
                        "MA",
                        "MC",
                        "MD",
                        "ME",
                        "MF",
                        "MG",
                        "MH",
                        "MK",
                        "ML",
                        "MM",
                        "MN",
                        "MO",
                        "MP",
                        "MQ",
                        "MR",
                        "MS",
                        "MT",
                        "MU",
                        "MV",
                        "MW",
                        "MX",
                        "MY",
                        "MZ",
                        "NC",
                        "NE",
                        "NF",
                        "NG",
                        "NI",
                        "NL",
                        "NO",
                        "NP",
                        "NR",
                        "NU",
                        "NZ",
                        "OM",
                        "PA",
                        "PE",
                        "PF",
                        "PG",
                        "PH",
                        "PK",
                        "PL",
                        "PM",
                        "PN",
                        "PR",
                        "PS",
                        "PT",
                        "PW",
                        "PY",
                        "QA",
                        "RE",
                        "RO",
                        "RS",
                        "RU",
                        "RW",
                        "SA",
                        "SB",
                        "SC",
                        "SD",
                        "SE",
                        "SG",
                        "SH",
                        "SI",
                        "SJ",
                        "SK",
                        "SL",
                        "SM",
                        "SN",
                        "SO",
                        "SR",
                        "SS",
                        "ST",
                        "SV",
                        "SX",
                        "SY",
                        "SZ",
                        "TC",
                        "TD",
                        "TF",
                        "TG",
                        "TH",
                        "TJ",
                        "TK",
                        "TL",
                        "TM",
                        "TN",
                        "TO",
                        "TR",
                        "TT",
                        "TV",
                        "TW",
                        "TZ",
                        "UA",
                        "UG",
                        "UM",
                        "UY",
                        "UZ",
                        "VA",
                        "VC",
                        "VE",
                        "VG",
                        "VI",
                        "VN",
                        "VU",
                        "WF",
                        "WS",
                        "YE",
                        "YT",
                        "ZA",
                        "ZM",
                        "ZW"
                    ]
                }
            ],
            "message": {
                "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                "priority": 91,
                "dismissible": false,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en": "Trading is not available in your country yet.",
                    "es": "El comercio aún no está disponible en tu país.",
                    "cs": "Obchodování zatím není ve vaší zemi dostupné.",
                    "de": "Der Handel ist in deinem Land noch nicht verfügbar.",
                    "fr": "Le trading n'est pas encore disponible dans votre pays.",
                    "it": "Il trading non è ancora disponibile nel tuo paese.",
                    "pt": "A negociação ainda não está disponível no seu país.",
                    "tr": "Ticaret henüz ülkenizde kullanılamıyor.",
                    "ru": "Торговля пока недоступна в вашей стране.",
                    "ja": "お住まいの国ではまだ取引をご利用いただけません。",
                    "uk": "Торгівля наразі недоступна y вашій країні.",
                    "hu": "A kereskedés még nem érhető el az Ön országában."
                },
                "feature": [
                    {
                        "domain": "trading.restrictions.blacklist",
                        "flag": true
                    }
                ]
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=24.5.1",
                        "mobile": "!",
                        "web": ">=24.5.1"
                    }
                }
            ],
            "message": {
                "id": "dbfce56e-6b9b-4f88-8acc-38b9bc5dabeb",
                "priority": 93,
                "dismissible": false,
                "variant": "warning",
                "category": ["context"],
                "content": {
                    "en": "Coinjoin was discontinued in Trezor Suite on June 1st, 2024. Your funds will remain accessible, and no action is needed.",
                    "es": "Coinjoin dejó de funcionar en Trezor Suite el 1 de junio de 2024. Sus fondos seguirán siendo accesibles y no es necesario realizar ninguna acción.",
                    "cs": "Služba Coinjoin byla v Trezor Suite ukončena 1. června 2024. Vaše finanční prostředky zůstanou přístupné bez nutnosti dalších kroků.",
                    "ru": "Coinjoin был прекращен в Trezor Suite 1 июня 2024 года. Ваши средства останутся доступными, и никаких действий предпринимать не нужно.",
                    "ja": "Coinjoinは2024年6月1日にTrezor Suiteで廃止されました。お客様の資金は引き続きご利用いただけます。",
                    "hu": "A Coinjoin 2024. június 1-jén megszűnt a Trezor Suite-ban. Az Ön pénzeszközei továbbra is elérhetőek maradnak, és nincs szükség semmilyen intézkedésre.",
                    "it": "Coinjoin è stato interrotto in Trezor Suite il 1° giugno 2024. I vostri fondi rimarranno accessibili e non è necesario alcun intervento.",
                    "fr": "Coinjoin a été supprimé dans Trezor Suite le 1er juin 2024. Vos fonds resteront accessibles et aucune action n'est nécessaire.",
                    "de": "Coinjoin wurde in der Trezor Suite am 1. Juni 2024 eingestellt. Ihre Gelder bleiben zugänglich, und es sind keine Maßnahmen erforderlich.",
                    "tr": "Coinjoin, 1 Haziran 2024 tarihinde Trezor Suite'de sonlandırıldı. Fonlarınız erişilebilir durumda kalacak ve herhangi bir işlem yapmanıza gerek yok.",
                    "pt": "O Coinjoin foi descontinuado no Trezor Suite em 1 de junho de 2024. Seus fundos permanecerão acessíveis e nenhuma ação é necessária.",
                    "uk": "Coinjoin було припинено в Trezor Suite 1 червня 2024 року. Ваші кошти залишаться доступними, і ніяких дій не потрібно."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://blog.trezor.io/important-update-transitioning-from-coinjoin-in-trezor-suite-9dfc63d2662f",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                },
                "context": { "domain": ["accounts.coinjoin", "accounts.btc.coinjoin"] }
            }
        },
        {
            "conditions": [
                {
                    "settings": [
                        {
                            "sol": true
                        }
                    ],
                    "environment": {
                        "desktop": ">25.2.1",
                        "mobile": "!",
                        "web": ">25.2.1"
                    },
                    "devices": [
                        {
                            "model": "T2B1",
                            "firmware": "<2.8.9",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T3B1",
                            "firmware": "<2.8.9",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T2T1",
                            "firmware": "<2.8.9",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        },
                        {
                            "model": "T3T1",
                            "firmware": "<2.8.9",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "ccd7b443-1e0e-449e-b58f-affa0459a29d",
                "priority": 93,
                "dismissible": true,
                "variant": "info",
                "category": ["context"],
                "content": {
                    "en": "For the best Solana staking experience, update your Trezor firmware to the latest version.",
                    "es": "Para la mejor experiencia de staking en Solana, actualiza el firmware de tu Trezor a la última versión.",
                    "cs": "Aby byl váš staking na Solaně co nejefektivnější, aktualizujte firmware vašeho Trezoru na nejnovější verzi.",
                    "ru": "Для наилучшего опыта стейкинга Solana обновите прошивку вашего Trezor до последней версии.",
                    "ja": "最高のSolanaステーキング体験を得るために、Trezorのファームウェアを最新バージョンに更新してください。",
                    "hu": "A legjobb Solana staking élményért frissítsd a Trezor firmware-ét a legújabb verzióra.",
                    "it": "Per la migliore esperienza di staking su Solana, aggiorna il firmware del tuo Trezor all'ultima versione.",
                    "fr": "Pour la meilleure expérience de staking sur Solana, mettez à jour le firmware de votre Trezor vers la dernière version.",
                    "de": "Für das beste Solana-Staking-Erlebnis, aktualisiere die Firmware deines Trezor auf die neueste Version.",
                    "tr": "En iyi Solana staking deneyimi için Trezor cihazınızın yazılımını en son sürüme güncelleyin.",
                    "pt": "Para a melhor experiência de staking em Solana, atualize o firmware do seu Trezor para a versão mais recente.",
                    "uk": "Для найкращого досвіду стейкінгу Solana оновіть прошивку свого Trezor до останньої версії."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "firmware-index",
                    "label": {
                        "en": "Update now",
                        "es": "Actualizar ahora",
                        "cs": "Aktualizujte nyní",
                        "ru": "Обновить сейчас",
                        "ja": "今すぐアップデート",
                        "hu": "Frissítés most",
                        "it": "Aggiorna ora",
                        "fr": "Mettre à jour maintenant",
                        "de": "Jetzt aktualisieren",
                        "tr": "Şimdi güncelle",
                        "pt": "Atualizar agora",
                        "uk": "Оновити зараз"
                    }
                },
                "context": { "domain": "accounts.sol.staking" }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<24.5.1",
                        "mobile": "!",
                        "web": "<24.5.1"
                    }
                }
            ],
            "message": {
                "id": "87371afe-181c-404e-a63d-2944313fe0e6",
                "priority": 93,
                "dismissible": false,
                "variant": "warning",
                "category": ["context"],
                "content": {
                    "en": "Coinjoin was discontinued in Trezor Suite on June 1st, 2024. Please update to the latest version of Trezor Suite to ensure your funds remain accessible.",
                    "es": "Coinjoin dejó de funcionar en Trezor Suite el 1 de junio de 2024. Por favor, actualice a la última versión de Trezor Suite para asegurarse de que sus fondos siguen siendo accesibles.",
                    "cs": "Služba Coinjoin byla v Trezor Suite ukončena 1. června 2024. Prosíme, aktualizujte Trezor Suite na nejnovější verzi pro zachování přístupu k vašim finančním prostředkům.",
                    "ru": "Coinjoin был прекращен в Trezor Suite 1 июня 2024 года. Пожалуйста, обновите Trezor Suite до последней версии, чтобы ваши средства оставались доступными.",
                    "ja": "Coinjoinは2024年6月1日にTrezor Suiteで廃止されました。資金が引き続きアクセス可能であることを確認するために、最新版のTrezor Suiteにアップデートしてください。",
                    "hu": "A Coinjoin 2024. június 1-jén megszűnt a Trezor Suite-ban. Kérjük, frissítsen a Trezor Suite legújabb verziójára, hogy pénzeszközei továbbra is elérhetőek maradjanak.",
                    "it": "Coinjoin è stato interrotto in Trezor Suite il 1° giugno 2024. Si prega di aggiornare alla versione più recente di Trezor Suite per garantire che i fondi rimangano accessibili.",
                    "fr": "Coinjoin a été supprimé dans Trezor Suite le 1er juin 2024. Veuillez mettre à jour la dernière version de Trezor Suite pour vous assurer que vos fonds restent accessibles.",
                    "de": "Coinjoin wurde in der Trezor Suite am 1. Juni 2024 eingestellt. Bitte aktualisieren Sie auf die neueste Version der Trezor Suite, um sicherzustellen, dass Sie weiterhin Zugriff auf Ihre Kryptowährungen haben.",
                    "tr": "Coinjoin, 1 Haziran 2024 tarihinde Trezor Suite'de sonlandırıldı. Fonlarınızın erişilebilir kalmasını sağlamak için lütfen Trezor Suite'in en son sürümüne güncelleyin.",
                    "pt": "O Coinjoin foi descontinuado no Trezor Suite em 1 de junho de 2024. Por favor, atualize para a versão mais recente do Trezor Suite para garantir que seus fundos permaneçam acessíveis.",
                    "uk": "Coinjoin було припинено в Trezor Suite 1 червня 2024 року. Будь ласка, оновіть Trezor Suite до останньої версії, щоб ваші кошти залишалися доступними."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://blog.trezor.io/important-update-transitioning-from-coinjoin-in-trezor-suite-9dfc63d2662f",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                },
                "context": { "domain": ["accounts.coinjoin", "accounts.btc.coinjoin"] }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "*",
                        "mobile": ">25.3.1",
                        "web": "*"
                    }
                }
            ],
            "message": {
                "id": "2dd5cdf7-4b63-4667-9667-4c7eebd9fb54",
                "priority": 49,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "We've seen an increase in phishing attempts targeting users to access their wallet backup (recovery seed). Never enter your wallet backup online — Trezor support will NEVER ask for it.",
                    "es": "Hemos visto un aumento en los intentos de phishing dirigidos a los usuarios para acceder a su copia de seguridad de la cartera (semilla de recuperación). Nunca introduzcas tu copia de seguridad de la cartera en línea: el soporte de Trezor NUNCA te lo pedirá.",
                    "cs": "Zaznamenali jsme nárůst phishingových pokusů zaměřených na uživatele s cílem získat jejich zálohu peněženky (recovery seed). Nikdy nezadávejte svou zálohu peněženky online – Trezor Support o ni NIKDY žádat nebude.",
                    "ru": "Мы наблюдаем рост попыток фишинга, нацеленных на пользователей для доступа к их резервной копии кошелька (seed восстановления). Никогда не вводите свою резервную копию кошелька в интернете — поддержка Trezor НИКОГДА не попросит вас об этом.",
                    "ja": "ウォレットのバックアップ（リカバリーシード）にアクセスするためのフィッシング試行が増加しています。ウォレットのバックアップをオンラインで入力しないでください—Trezorサポートは絶対にそれを要求しません。",
                    "hu": "A pénztárca biztonsági mentéséhez (helyreállítási mag) való hozzáférés céljából növekvő számú adathalászati kísérletet észleltünk. Soha ne adja meg a pénztárca biztonsági mentését online - a Trezor támogatás SOHA nem fogja kérni.",
                    "it": "Abbiamo visto un aumento dei tentativi di phishing mirati agli utenti per accedere al backup del portafoglio (seme di ripristino). Non inserire mai il backup del portafoglio online: il supporto Trezor NON lo chiederà MAI.",
                    "fr": "Nous avons constaté une augmentation des tentatives de phishing visant les utilisateurs pour accéder à leur sauvegarde de portefeuille (seed de récupération). Ne saisissez jamais votre sauvegarde de portefeuille en ligne - le support Trezor ne vous le demandera JAMAIS.",
                    "de": "Wir haben einen Anstieg von Phishing-Versuchen festgestellt, die darauf abzielen, Benutzern den Zugriff auf ihre Wallet-Sicherung (Wiederherstellungsphrase) zu ermöglichen. Geben Sie Ihre Wallet-Sicherung niemals online ein – der Trezor-Support wird Sie NIEMALS danach fragen.",
                    "tr": "Cüzdan yedeğinize (kurtarma tohumuna) erişmek için kullanıcıları hedef alan artan kimlik avı girişimleri gördük. Cüzdan yedeğinizi asla çevrimiçi olarak girmeyin - Trezor desteği ASLA bunu istemez.",
                    "pt": "Vimos um aumento nas tentativas de phishing direcionadas a usuários para acessar o backup da carteira (semente de recuperação). Nunca insira o backup da sua carteira online - o suporte Trezor NUNCA pedirá isso.",
                    "uk": "Ми спостерігаємо збільшення спроб фішингу, спрямованих на користувачів для доступу до їх резервної копії гаманця (seed відновлення). Ніколи не вводьте резервну копію гаманця в Інтернеті — підтримка Trezor НІКОЛИ не попросить вас про це."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/learn/security-privacy/personal-security-standards/scams-and-phishing",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">23.10.1",
                        "mobile": "!",
                        "web": ">23.10.1"
                    },
                    "devices": [
                        {
                            "model": "T2B1",
                            "firmware": "<2.6.3",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "e11a586f-f2d7-4c7b-7dd9-d8f56d1c90ad",
                "priority": 92,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "An update is available for your Trezor device. Make sure you’ve got your recovery seed ready as you’ll need it to regain access to your coins.",
                    "es": "Hay una actualización disponible para tu dispositivo Trezor. Asegúrate de que la semilla de recuperación está lista, ya que la necesitarás para recuperar el acceso a tus monedas.",
                    "cs": "Pro zařízení Trezor je k dispozici aktualizace. Ujistěte se, že máte připravený recovery seed, protože jej budete potřebovat k obnovení přístupu k mincím.",
                    "ru": "Для устройства Trezor доступно обновление. Убедитесь, что у вас наготове семена восстановления, поскольку они понадобятся для восстановления доступа к монетам.",
                    "ja": "お使いのTrezorデバイスにアップデートが提供されています。コインへのアクセスを回復するにはリカバリーのシードが必要です。",
                    "hu": "Frissítés érhető el a Trezor készülékéhez. Győződjön meg róla, hogy készenlétben tartja a helyreállítási magot, mivel szüksége lesz rá, hogy újra hozzáférjen az érméihez.",
                    "it": "È disponibile un aggiornamento per il vostro dispositivo Trezor. Assicuratevi di avere pronto il seme di ripristino, che vi servirà per riavere accesso alle monete.",
                    "fr": "Une mise à jour est disponible pour votre dispositif Trezor. Assurez-vous d’avoir votre seed de récupération à portée de main, car vous en aurez besoin pour accéder à nouveau à vos coins.",
                    "de": "Es gibt ein Update für dein Trezor Gerät. Halte deinen Recovery Seed bereit. Du brauchst ihn, um wieder auf deine Coins zuzugreifen.",
                    "tr": "Trezor cihazınız için bir güncelleme mevcut. Paralarınıza yeniden erişmek için kurtarma tohumunuzu hazırda bulundurduğunuzdan emin olun.",
                    "pt": "Está disponível uma atualização para o seu dispositivo Trezor. Certifique-se de que tem a sua semente de recuperação pronta, pois vai precisar dela para recuperar o acesso às suas moedas.",
                    "uk": "Для вашого пристрою Trezor доступне оновлення. Переконайтеся, що у вас готовий резервний ключ, оскільки вам знадобиться він для відновлення доступу до монет."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "firmware-index",
                    "label": {
                        "en": "Update now",
                        "es": "Actualizar ahora",
                        "cs": "Aktualizovat teď",
                        "ru": "Обновить сейчас",
                        "ja": "今すぐアップデート",
                        "hu": "Frissítés most",
                        "it": "Aggiorna ora",
                        "fr": "Mettre à jour maintenant",
                        "de": "Jetzt aktualisieren",
                        "tr": "Şimdi Güncelle",
                        "pt": "Atualizar agora",
                        "uk": "Оновити зараз"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "settings": [
                        {
                            "INPUT HERE": true
                        }
                    ],
                    "environment": {
                        "desktop": "!",
                        "mobile": "!",
                        "web": "!"
                    }
                }
            ],
            "message": {
                "id": "c5b85f25-7d59-428a-9742-78df00a53577",
                "priority": 92,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "We are experiencing syncing issues with the INPUT HERE network. This may temporarily result in errors or slow response times on INPUT HERE. This issue does not affect the safety of your INPUT HERE funds in any way. We apologize for the inconvenience.",
                    "es": "Estamos experimentando problemas de sincronización con la red de INPUT HERE. Esto puede resultar temporalmente en errores o tiempos de respuesta lentos en INPUT HERE. Este problema no afecta en absoluto la seguridad de sus fondos de INPUT HERE. Pedimos disculpas por las molestias.",
                    "cs": "Potýkáme se s dočasnými potížemi se synchronizací sítě INPUT HERE, které mohou vést k chybám nebo pomalejší odezvě. Bezpečnost vašich prostředků na síti INPUT HERE tím však není nijak ohrožena. Omlouváme se za nepříjemnosti a děkujeme za pochopení.",
                    "ru": "У нас возникли проблемы с синхронизацией сети INPUT HERE. Это может временно привести к ошибкам или медленным временам ответа на INPUT HERE. Эта проблема никоим образом не влияет на безопасность ваших средств INPUT HERE. Приносим извинения за неудобства.",
                    "ja": "INPUT HEREネットワークの同期に問題が発生しています。これにより、INPUT HEREで一時的にエラーや応答時間が遅くなる場合があります。この問題は、INPUT HEREの資金の安全性にまったく影響しません。ご不便をおかけして申し訳ありません。",
                    "hu": "Problémák merültek fel az INPUT HERE hálózat szinkronizálásával. Ez ideiglenesen hibákat vagy lassú válaszidőket eredményezhet az INPUT HERE-en. Ez a probléma semmilyen módon nem érinti az INPUT HERE pénzügyeinek biztonságát. Elnézést kérünk a kellemetlenségért.",
                    "it": "Stiamo riscontrando problemi di sincronizzazione con la rete INPUT HERE. Ciò potrebbe comportare temporaneamente errori o tempi di risposta lenti su INPUT HERE. Questo problema non influisce in alcun modo sulla sicurezza dei tuoi fondi INPUT HERE. Ci scusiamo per l'inconveniente.",
                    "fr": "Nous rencontrons des problèmes de synchronisation avec le réseau INPUT HERE. Cela peut entraîner temporairement des erreurs ou des temps de réponse lents sur INPUT HERE. Ce problème n'affecte en aucun cas la sécurité de vos fonds INPUT HERE. Nous nous excusons pour la gêne occasionnée.",
                    "de": "Wir haben Probleme mit der Synchronisierung des INPUT HERE-Netzwerks. Dies kann vorübergehend zu Fehlern oder langsamen Antwortzeiten auf INPUT HERE führen. Dieses Problem beeinträchtigt die Sicherheit Ihrer INPUT HERE-Fonds in keiner Weise. Wir entschuldigen uns für die Unannehmlichkeiten.",
                    "tr": "INPUT HERE ağı ile senkronizasyon sorunları yaşıyoruz. Bu, geçici olarak INPUT HERE'da hatalara veya yavaş yanıt sürelerine neden olabilir. Bu sorun, INPUT HERE fonlarınızın güvenliğini hiçbir şekilde etkilemez. Rahatsızlık için özür dileriz.",
                    "pt": "Estamos enfrentando problemas de sincronização com a rede INPUT HERE. Isso pode resultar temporariamente em erros ou tempos de respuesta lentos na INPUT HERE. Este problema não afeta de forma alguma a segurança dos seus fundos INPUT HERE. Pedimos desculpas pelo inconveniente.",
                    "uk": "У нас виникли проблеми з синхронізацією мережі INPUT HERE. Це може тимчасово призвести до помилок або повільних часів відповіді на INPUT HERE. Ця проблема ніяк не впливає на безпеку ваших коштів INPUT HERE. Приносимо вибачення за незручності."
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=24.5.4 <=25.6.1",
                        "mobile": "!",
                        "web": "!"
                    }
                }
            ],
            "message": {
                "id": "9e19da13-e203-48ee-b39c-ef6a209137d6",
                "priority": 91,
                "dismissible": true,
                "variant": "warning",
                "category": ["banner"],
                "content": {
                    "en": "Update Trezor Suite for enhanced security, all the latest features, and to keep everything running as smoothly as possible.",
                    "es": "Actualiza Trezor Suite para mejorar la seguridad, disfrutar de las funciones más recientes y para que todo funcione sin problemas.",
                    "cs": "Aktualizujte Trezor Suite, abyste získali lepší zabezpečení a nejnovější funkce.",
                    "ru": "Обновите Trezor Suite, чтобы улучшить безопасность, использовать все новейшие функции и обеспечить максимально эффективную работу.",
                    "ja": "Trezor Suiteをアップデートすることで、セキュリティの強化、最新機能の搭載、スムーズな動作が可能になります。",
                    "hu": "Frissítse a Trezor Suite-ot a fokozott biztonság, a legújabb funkciók és a lehető leggördülékenyebb működés érdekében.",
                    "it": "Aggiornate Trezor Suite per ottenere una maggiore sicurezza, tutte le funzioni più recenti e per far funzionare tutto nel modo più fluido possibile.",
                    "fr": "Mettez à jour Trezor Suite pour bénéficier d’une sécurité renforcée, de toutes les dernières fonctionnalités, et pour garantir un fonctionnement optimal.",
                    "de": "Aktualisiere Trezor Suite für mehr Sicherheit, neue Funktionen und reibungslose Abläufe.",
                    "tr": "Geliştirilmiş güvenlik, en yeni özellikler ve her şeyin olabildiğince sorunsuz çalışması için Trezor Suite'i güncelleyin.",
                    "pt": "Atualize o Trezor Suite para maior segurança, todos os recursos mais recentes e para manter tudo funcionando da forma mais suave possível.",
                    "uk": "Оновіть Trezor Suite для підвищення безпеки, використання всіх новітніх функцій та забезпечення максимально плавної роботи."
                },
                "cta": {
                    "action": "internal-link",
                    "link": "settings-index",
                    "anchor": "@general-settings/version-with-update",
                    "label": {
                        "en": "Update Suite",
                        "es": "Actualizar Suite",
                        "cs": "Aktualizovat Suite",
                        "ru": "Обновить Suite",
                        "ja": "Suiteのアップデート",
                        "hu": "Frissítés Suite",
                        "it": "Aggiorna Suite",
                        "fr": "Mettre à jour Suite",
                        "de": "Suite aktualisieren",
                        "tr": "Suite'i Güncelle",
                        "pt": "Atualizar Suite",
                        "uk": "Оновити Suite"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=25.2.1",
                        "mobile": "!",
                        "web": ">=25.2.1"
                    },
                    "settings": [
                        {
                            "test": true
                        }
                    ]
                }
            ],
            "message": {
                "id": "50b760bc-e804-4870-b072-9f3eaaaa26be",
                "priority": 90,
                "dismissible": true,
                "variant": "info",
                "category": ["banner"],
                "content": {
                    "en": "Bitcoin Testnet account has been updated to new Testnet4.",
                    "es": "La cuenta de Bitcoin Testnet ha sido actualizada al nuevo Testnet4.",
                    "cs": "Účet Bitcoin Testnet byl aktualizován na nový Testnet4.",
                    "ru": "Аккаунт Bitcoin Testnet был обновлён до нового Testnet4.",
                    "ja": "Bitcoinテストネットのアカウントは新しいTestnet4に更新されました。",
                    "hu": "A Bitcoin Testnet fiók frissítve lett az új Testnet4-re.",
                    "it": "L'account Bitcoin Testnet è stato aggiornato al nuovo Testnet4.",
                    "fr": "Le compte Bitcoin Testnet a été mis à jour vers le nouveau Testnet4.",
                    "de": "Das Bitcoin-Testnet-Konto wurde auf das neue Testnet4 aktualisiert.",
                    "tr": "Bitcoin Testnet hesabı yeni Testnet4'e güncellendi.",
                    "pt": "A conta do Bitcoin Testnet foi atualizada para o novo Testnet4.",
                    "uk": "Обліковий запис Bitcoin Testnet оновлено до нового Testnet4."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/learn/supported-assets/bitcoin/using-bitcoin-testnet-with-trezor#why-the-switch-from-testnet3-to-testnet4",
                    "label": {
                        "en": "Learn More",
                        "es": "Más Información",
                        "cs": "Více Informací",
                        "ru": "Подробнее",
                        "ja": "詳細はこちら",
                        "hu": "További Információ",
                        "it": "Scopri di Più",
                        "fr": "En Savoir Plus",
                        "de": "Mehr Erfahren",
                        "tr": "Daha Fazla Bilgi",
                        "pt": "Saiba Mais",
                        "uk": "Дізнатись більше"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "*",
                        "mobile": ">=24.12.1",
                        "web": "*"
                    },
                    "devices": [
                        {
                            "model": "T3T1",
                            "firmware": "2.8.6",
                            "bootloader": "*",
                            "variant": "*",
                            "firmwareRevision": "*",
                            "vendor": "*"
                        }
                    ]
                }
            ],
            "message": {
                "id": "cdcc9424-a42a-4d85-b46d-1ac2e9e1dc8a",
                "priority": 90,
                "dismissible": false,
                "variant": "critical",
                "category": ["banner"],
                "content": {
                    "en": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "es": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "cs": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "ru": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "ja": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "hu": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "it": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "fr": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "de": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "tr": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "pt": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances.",
                    "uk": "You have downloaded an incomplete firmware version 2.8.6, released unintentionally. Tap here to open our chatbot and create a support ticket for assistance. Remember, never share your wallet backup with anyone under any circumstances."
                },
                "cta": {
                    "action": "external-link",
                    "link": "https://trezor.io/learn/a/what-is-trezor-suite-lite#open-chat",
                    "label": {
                        "en": "Contact support",
                        "es": "Contact support",
                        "cs": "Contact support",
                        "ru": "Contact support",
                        "ja": "Contact support",
                        "hu": "Contact support",
                        "it": "Contact support",
                        "fr": "Contact support",
                        "de": "Contact support",
                        "tr": "Contact support",
                        "pt": "Contact support",
                        "uk": "Contact support"
                    }
                }
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "<24.12.3",
                        "mobile": "!",
                        "web": "<24.12.3"
                    }
                }
            ],
            "message": {
                "id": "3cd41bc4-c635-44d0-94cd-d711da2752ac",
                "priority": 1,
                "dismissible": false,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en": "Placeholder",
                    "es": "Placeholder",
                    "cs": "Placeholder",
                    "de": "Placeholder",
                    "fr": "Placeholder",
                    "it": "Placeholder",
                    "pt": "Placeholder",
                    "tr": "Placeholder",
                    "ru": "Placeholder",
                    "ja": "Placeholder",
                    "uk": "Placeholder",
                    "hu": "Placeholder"
                },
                "feature": [
                    {
                        "domain": "security.firmware.hashCheck",
                        "flag": false
                    }
                ]
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=25.3.1 <25.5.0",
                        "mobile": "!",
                        "web": ">=25.3.1 <25.5.0"
                    }
                }
            ],
            "message": {
                "id": "2f93e955-0d41-4e3e-a778-1812bbd0fa72",
                "priority": 1,
                "dismissible": false,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en": "Placeholder",
                    "es": "Placeholder",
                    "cs": "Placeholder",
                    "de": "Placeholder",
                    "fr": "Placeholder",
                    "it": "Placeholder",
                    "pt": "Placeholder",
                    "tr": "Placeholder",
                    "ru": "Placeholder",
                    "ja": "Placeholder",
                    "uk": "Placeholder",
                    "hu": "Placeholder"
                },
                "feature": [
                    {
                        "domain": "security.firmware.hashCheck.otherError",
                        "flag": false
                    }
                ]
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=25.8.0 <25.9.0",
                        "mobile": "!",
                        "web": ">=25.8.0 <25.9.0"
                    }
                }
            ],
            "message": {
                "id": "9534d059-f847-4694-b6ff-444504c74b4b",
                "priority": 1,
                "dismissible": false,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en": "Placeholder",
                    "es": "Placeholder",
                    "cs": "Placeholder",
                    "de": "Placeholder",
                    "fr": "Placeholder",
                    "it": "Placeholder",
                    "pt": "Placeholder",
                    "tr": "Placeholder",
                    "ru": "Placeholder",
                    "ja": "Placeholder",
                    "uk": "Placeholder",
                    "hu": "Placeholder"
                },
                "feature": [
                    {
                        "domain": "security.entropyCheck",
                        "flag": false
                    }
                ]
            }
        },
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": ">=25.8.1",
                        "mobile": "!",
                        "web": "*"
                    }
                }
            ],
            "message": {
                "id": "ab804171-6266-4618-be4f-a7c25d4c19ce",
                "priority": 1,
                "dismissible": true,
                "variant": "info",
                "category": "feature",
                "content": {
                    "en-GB": "Placehodler",
                    "en": "Placehodler",
                    "es": "Placehodler",
                    "cs": "Placehodler",
                    "de": "Placehodler",
                    "fr": "Placehodler",
                    "it": "Placehodler",
                    "pt": "Placehodler",
                    "tr": "Placehodler",
                    "ru": "Placehodler",
                    "ja": "Placehodler",
                    "uk": "Placehodler",
                    "hu": "Placehodler"
                },
                "feature": [
                    {
                        "domain": "dashboard.promoBanner",
                        "visibleBanner": "tex",
                        "flag": true
                    }
                ]
            }
        }
    ],
    "experiments": [
        {
            "conditions": [
                {
                    "environment": {
                        "desktop": "*",
                        "mobile": "!",
                        "web": "!"
                    }
                }
            ],
            "experiment": {
                "id": "092db279-98dc-418e-bbfa-ef70716fb211",
                "groups": [
                    {
                        "variant": "A",
                        "percentage": 80
                    },
                    {
                        "variant": "B",
                        "percentage": 20
                    }
                ]
            }
        }
    ]
}
.H2-G9BWBK_RjksgQWjxUYPtGxLGfvBY1pXZE-ICh7yRN8Zf5zsEefyGI9m4NbbkLWrsnoKlDu2FGNfgrWn28DQ